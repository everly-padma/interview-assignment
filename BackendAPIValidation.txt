Backend API Validations:


//create a global function to return the items in the cart

    getItemsinCart(){

	fetch (
		‘https://everlywell.com/v9/shoppingCart',
		Method: ‘GET’, 
		Headers: “{
					Accept: 'application/json',
					'Content-Type': 'application/json',
					Authorization: 'Bearer “+ bearerToken +”’
				}” 
		).then(function(response) { 
		
		if(response.ok) {
    			return(response.getjson())
  		} else {
    			response.text().then(msg = > console.log(msg));

  		}
		
	})catch(function(error) {
  		console.log(‘unexpected error while getting  items from cart : ' + error.message);
	});		

    }



Scenario 1:

// get total price from the cart
// get the discount amount
// assert subtotal = total - discount

	@Test
	testValidSubtotal(){

		cart = getItemsinCart()

		discount = cart.discount
		total = 0

		for(item : cart.items){
			total += item.price
		}

		subtotal = cart.subTotal

		assertTrue( subtotal == total - discount )
	}
	



Scenario 2:
 //in this scenario, malicious user will be unaware of 
// 	1. the bearer token 
//	2. Discount name
//	3. Amount semantics
// So the user will attempt various combination to try to make it work. I will assume only 1 such failed scenario


  @Test
    maliciousAttempt(){

	responseCode = -1

	fetch (
		‘https://everlywell.com/v9/promoCode',
		Method: ‘POST’, 
		Headers: {
				Accept: 'application/json',
				'Content-Type': 'application/json',
				Authorization: 'Bearer wdfvwefwefwvwefvw’
		} ,
		Body: {
			
			discountAmount: 100
		
		}
	).then(function(response) { 

		responseCode = response.headers.get("status”)
						
	})catch(function(error) {
  		console.log(‘unexpected error while trying for  malicious attempt : ' + error.message);
	});		

	items = getItemsinCart().items

	assertTrue(responseCode <> 200 && items[0].name == "FIT Test" && items[0].quantity == 1 && items[0].price == 40 && items[1].name == “Allergy Test" && items[1].quantity == 1 && items[1].price == 60)  

    }
